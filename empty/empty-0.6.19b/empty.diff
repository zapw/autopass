--- /home/marceloe/empty-orig/empty-0.6.19b/empty.c	2012-09-19 14:24:05.000000000 +0300
+++ ./empty.c	2014-11-27 21:24:27.044669401 +0200
@@ -122,7 +122,7 @@
 int regmatch(const char *string, char *pattern, regex_t *re);
 int watch4str(int ifd, int ofd, int argc, char *argv[],
 		int Sflg, int vflg, int cflg, int timeout);
-int parsestr(char *dst, char *src, int len, int Sflg);
+int parsestr(char *dst, char *src, int len, int Sflg, int cflg);
 
 /* -------------------------------------------------------------------------- */
 int     master, slave;
@@ -155,6 +155,7 @@
 	int	vflg = 0;		/* kvazi verbose mode OFF */
 	int	timeout = 10;		/* wait N secs for the responce */
 	int	Lflg = 0;		/* Log empty session */
+	int	zflg = 0;		/* Don't log input */
 	int	rflg = 0;		/* recv output */
 	int	bflg = 0;		/* block size for -r flag */
 	int	tflg = 0;		/* Timeout flag for -b (timeout?) */
@@ -207,9 +208,9 @@
 #endif
 
 #ifndef __linux__
-	while ((ch = getopt(argc, argv, "Scvhfrb:kwslp:i:o:t:L:")) != -1)
+	while ((ch = getopt(argc, argv, "Sczvhfrb:kwslp:i:o:t:L:")) != -1)
 #else
-	while ((ch = getopt(argc, argv, "+Scvhfrb:kwslp:i:o:t:L:")) != -1)
+	while ((ch = getopt(argc, argv, "+Sczvhfrb:kwslp:i:o:t:L:")) != -1)
 #endif
 		switch (ch) {
 			case 'f':
@@ -266,11 +267,14 @@
 				sl = optarg;
 				Lflg = 1;
 				break;
+			case 'z':
+				/* Don't log input */
+				zflg = 1;
+				break;
 			case 'c':
 				/* use stdin instead of FIFO */
 				cflg = 1;
 				break;
-		
 			case 'S':
 				/* Strip last character from input */
 				Sflg = 1;
@@ -331,14 +335,14 @@
 			(void)perrx(255, "Fatal open FIFO for writing: %s", out);
 		
 		if (!cflg && argv[0] != NULL) {
-			bl = parsestr(buf, argv[0], strlen(argv[0]), Sflg);
+			bl = parsestr(buf, argv[0], strlen(argv[0]), Sflg, cflg);
 			if (write(ofd, buf, bl) == -1)
 				(void)perrx(255, "Fatal write data to FIFO: %s", out);
 		} else
 			while ((cc  = read(0, buf, sizeof(buf))) > 0) {
 				if (cc == -1)
 					(void)perrx(255, "Fatal read from STDIN to buffer");
-				bl = parsestr(buf, buf, cc, Sflg);
+				bl = parsestr(buf, buf, cc, Sflg, cflg);
 				if (write(ofd, buf, bl) == -1)
 					(void)perrx(255, "Fatal write STDIN data to FIFO: %s", out);
 			}
@@ -612,7 +616,7 @@
 				if ((cc = read(ifd, buf, sizeof(buf))) > 0) {
 					/* our input */
 					(void)write(master, buf, cc);
-					if (lfd) {
+					if (lfd && !zflg ) {
 						if (fl_state != 1) {
 							(void)write(lfd, ">>>", 3);
 							fl_state = 1;
@@ -626,7 +630,7 @@
 					/* remote output */
 					(void)write(ofd, buf, cc);
 					if (lfd) {
-						if (fl_state != 0) {
+						if (fl_state != 0 && !zflg ) {
 							(void)write(lfd, "<<<", 3);
 							fl_state = 0;
 						}
@@ -643,9 +647,9 @@
 static void usage(void) {
 	(void)fprintf(stderr,
 "%s-%s usage:\n\
-empty -f [-i fifo1 -o fifo2] [-p file.pid] [-L file] command [command args]\n\
+empty -f [-i fifo1 -o fifo2] [-p file.pid] [-z] [-L file] command [command args]\n\
 empty -w [-Sv] [-t n] [-i fifo2 -o fifo1] key1 [answer1] ... [keyX answerX]\n\
-empty -s [-Sc] [-o fifo1] [request]\n\
+empty -s [-Scz] [-o fifo1] [request]\n\
 empty -r [-b size] [-t n] [-i fifo1]\n\
 empty -l\n\
 empty -k [pid] [signal]\n\
@@ -906,7 +910,7 @@
 				if ((argt = checkgr(argc, argv, buf, 0)) > 0) {
 					if ((resp = argv[argt])) {
 						/* Nb chars for buf */
-						bl = parsestr(buf, resp, strlen(resp), Sflg);
+						bl = parsestr(buf, resp, strlen(resp), Sflg, cflg);
 						/* write response to fifo */
 						if (write(ofd, buf, bl) == -1) 
 						    (void)perrx(255, "Fatal write data to output");
@@ -941,13 +945,13 @@
 }
 
 /* -------------------------------------------------------------------------- */
-int parsestr(char *dst, char *src, int len, int Sflg) {
+int parsestr(char *dst, char *src, int len, int Sflg, int cflg) {
 	int i, bi;
 	
 	/* Return numbers of chars for response */
 	Sflg == 1 ? len-- : len;
 	for (i = 0, bi = 0; i < len; i++, bi++) {
-		if (src[i] == '\\')
+		if (src[i] == '\\' && !cflg)
 			switch (src[i + 1]) {
 				case '\\':
 					dst[bi] = '\\';
